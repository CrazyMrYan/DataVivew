{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\新建文件夹\\DataVivew\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Desktop\\新建文件夹\\DataVivew\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\Desktop\\新建文件夹\\DataVivew\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\新建文件夹\\DataVivew\\node_modules\\@jiaminghi\\data-view\\lib\\components\\percentPond\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\新建文件夹\\DataVivew\\node_modules\\@jiaminghi\\data-view\\lib\\components\\percentPond\\src\\main.vue","mtime":1589870976081},{"path":"C:\\Users\\Administrator\\Desktop\\新建文件夹\\DataVivew\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1577779768247},{"path":"C:\\Users\\Administrator\\Desktop\\新建文件夹\\DataVivew\\node_modules\\babel-loader\\lib\\index.js","mtime":1585106718819},{"path":"C:\\Users\\Administrator\\Desktop\\新建文件夹\\DataVivew\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1577779768247},{"path":"C:\\Users\\Administrator\\Desktop\\新建文件夹\\DataVivew\\node_modules\\vue-loader\\lib\\index.js","mtime":1588730776092}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"dv-percent-pond\" ref=\"percent-pond\">\n    <svg>\n      <defs>\n        <linearGradient :id=\"gradientId1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n\n        <linearGradient :id=\"gradientId2\" x1=\"0%\" y1=\"0%\" :x2=\"gradient2XPos\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n      <rect\n        :x=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :y=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :rx=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        :ry=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        fill=\"transparent\"\n        :stroke-width=\"mergedConfig ? mergedConfig.borderWidth : '0'\"\n        :stroke=\"`url(#${gradientId1})`\"\n        :width=\"rectWidth > 0 ? rectWidth : 0\"\n        :height=\"rectHeight > 0 ? rectHeight : 0\"\n      />\n      <polyline\n        :stroke-width=\"polylineWidth\"\n        :stroke-dasharray=\"mergedConfig ? mergedConfig.lineDash.join(',') : '0'\"\n        :stroke=\"`url(#${polylineGradient})`\"\n        :points=\"points\"\n      />\n      <text\n        :stroke=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :fill=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :x=\"width / 2\"\n        :y=\"height / 2\"\n      >\n        {{ details }}\n      </text>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvPercentPond',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    const timestamp = Date.now()\n    return {\n      gradientId1: `percent-pond-gradientId1-${timestamp}`,\n      gradientId2: `percent-pond-gradientId2-${timestamp}`,\n\n      width: 0,\n      height: 0,\n\n      defaultConfig: {\n        /**\n         * @description Value\n         * @type {Number}\n         * @default value = 0\n         */\n        value: 0,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Border width\n         * @type {Number}\n         * @default borderWidth = 3\n         */\n        borderWidth: 3,\n        /**\n         * @description Gap between border and pond\n         * @type {Number}\n         * @default borderGap = 3\n         */\n        borderGap: 3,\n        /**\n         * @description Line dash\n         * @type {Array<Number>}\n         * @default lineDash = [5, 1]\n         */\n        lineDash: [5, 1],\n        /**\n         * @description Text color\n         * @type {String}\n         * @default textColor = '#fff'\n         */\n        textColor: '#fff',\n        /**\n         * @description Border radius\n         * @type {Number}\n         * @default borderRadius = 5\n         */\n        borderRadius: 5,\n        /**\n         * @description Local Gradient\n         * @type {Boolean}\n         * @default localGradient = false\n         * @example localGradient = false | true\n         */\n        localGradient: false,\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: null\n    }\n  },\n  computed: {\n    rectWidth () {\n      const { mergedConfig, width } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return width - borderWidth\n    },\n    rectHeight () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return height - borderWidth\n    },\n    points () {\n      const { mergedConfig, width, height } = this\n\n      const halfHeight = height / 2\n\n      if (!mergedConfig) return `0, ${halfHeight} 0, ${halfHeight}`\n\n      const { borderWidth, borderGap, value } = mergedConfig\n\n      const polylineLength = (width - (borderWidth + borderGap) * 2) / 100 * value\n\n      return `\n        ${borderWidth + borderGap}, ${halfHeight}\n        ${borderWidth + borderGap + polylineLength}, ${halfHeight + 0.001}\n      `\n    },\n    polylineWidth () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth, borderGap } = mergedConfig\n\n      return height - (borderWidth + borderGap) * 2\n    },\n    linearGradient () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return []\n\n      const { colors } = mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      return colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    polylineGradient () {\n      const { gradientId1, gradientId2, mergedConfig } = this\n\n      if (!mergedConfig) return gradientId2\n\n      if (mergedConfig.localGradient) return gradientId1\n\n      return gradientId2\n    },\n    gradient2XPos () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return '100%'\n\n      const { value } = mergedConfig\n\n      return `${200 - value}%`\n    },\n    details () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return ''\n\n      const { value, formatter } = mergedConfig\n\n      return formatter.replace('{value}', value)\n    }\n  },\n  watch: {\n    config () {\n      const { mergeConfig } = this\n\n      mergeConfig()\n    }\n  },\n  methods: {\n    async init () {\n      const { initWH, config, mergeConfig } = this\n\n      await initWH()\n\n      if (!config) return\n\n      mergeConfig()\n    },\n    async initWH () {\n      const { $nextTick, $refs } = this\n\n      await $nextTick()\n\n      const dom = $refs['percent-pond']\n\n      this.width = dom.clientWidth\n      this.height = dom.clientHeight\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  }\n}\n</script>"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/percentPond/src"}]}